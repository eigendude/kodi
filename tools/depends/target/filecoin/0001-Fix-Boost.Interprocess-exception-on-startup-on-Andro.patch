From 8079006ae214c4ee5e6c6860a3eaa9ef76863d1a Mon Sep 17 00:00:00 2001
From: Garrett Brown <garrett.brown@aclima.io>
Date: Sat, 21 Mar 2020 08:44:05 -0700
Subject: [PATCH] Fix Boost.Interprocess exception on startup on Android

Error was:

| libc++abi: terminating with uncaught exception of type boost::interprocess::interprocess_exception: Function not implemented
| libc    : Fatal signal 6 (SIGABRT), code -6 (SI_TKILL) in tid 26682 (org.xbmc.kodi), pid 26682 (org.xbmc.kodi)
|
| backtrace:
|     #06 pc 00000000038762b4  /data/app/org.xbmc.kodi-Ekrg8apC-NXlAd2IoGRtdQ==/lib/arm64/libkodi.so (boost::interprocess::ipcdetail::semaphore_open(sem_t*&, boost::interprocess::ipcdetail::create_enum_t, char const*, unsigned int, boost::interprocess::permissions const&)+272)
---
 core/fslock/fslock.cpp                                 | 5 +++++
 core/fslock/fslock_error.cpp                           | 2 ++
 core/storage/repository/impl/filesystem_repository.cpp | 4 +++-
 include/filecoin/fslock/fslock_error.hpp               | 1 +
 4 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/core/fslock/fslock.cpp b/core/fslock/fslock.cpp
index b00292a..8c895ad 100644
--- a/core/fslock/fslock.cpp
+++ b/core/fslock/fslock.cpp
@@ -16,6 +16,9 @@ namespace fc::fslock {
   // TODO(artyom-yurin): [FIL-115] Should be unlocked if process died
   outcome::result<boost::interprocess::file_lock> Locker::lock(
       const std::string &file_lock_path) {
+    // TODO
+    return FSLockError::NOT_IMPLEMENTED;
+
     try {
       if (boost::filesystem::is_directory(file_lock_path))
         return FSLockError::IS_DIRECTORY;
@@ -34,8 +37,10 @@ namespace fc::fslock {
     }
   }
 
+  /* TODO
   boost::interprocess::named_mutex Locker::mutex =
       boost::interprocess::named_mutex(
           boost::interprocess::open_or_create,
           "fslock");
+  */
 }  // namespace fc::fslock
diff --git a/core/fslock/fslock_error.cpp b/core/fslock/fslock_error.cpp
index 6f92b9e..cb1fd5b 100644
--- a/core/fslock/fslock_error.cpp
+++ b/core/fslock/fslock_error.cpp
@@ -13,6 +13,8 @@ OUTCOME_CPP_DEFINE_CATEGORY(fc::fslock, FSLockError, e) {
       return "FileLock: file is locked";
     case (FSLockError::IS_DIRECTORY):
       return "FileLock: cannot lock directory";
+    case (FSLockError::NOT_IMPLEMENTED):
+      return "FileLock: not implemented";
     case (FSLockError::UNKNOWN):
       return "FileLock: unknown error";
   }
diff --git a/core/storage/repository/impl/filesystem_repository.cpp b/core/storage/repository/impl/filesystem_repository.cpp
index 590bc00..2200ce6 100644
--- a/core/storage/repository/impl/filesystem_repository.cpp
+++ b/core/storage/repository/impl/filesystem_repository.cpp
@@ -59,7 +59,9 @@ fc::outcome::result<std::shared_ptr<Repository>> FileSystemRepository::create(
       repo_path + fc::storage::filestore::DELIMITER + kRepositoryLock;
   std::unique_ptr<fslock::Locker> fs_locker =
       std::make_unique<fslock::Locker>();
-  OUTCOME_TRY(fs_locker->lock(lock_filename));
+  auto lockResult = fs_locker->lock(lock_filename);
+  if (!lockResult)
+    logger_->error("Continuing without filesystem lock: " + lockResult.error().message());
 
   // load config if exists
   auto config_filename =
diff --git a/include/filecoin/fslock/fslock_error.hpp b/include/filecoin/fslock/fslock_error.hpp
index d09139c..983916b 100644
--- a/include/filecoin/fslock/fslock_error.hpp
+++ b/include/filecoin/fslock/fslock_error.hpp
@@ -16,6 +16,7 @@ namespace fc::fslock {
   enum class FSLockError {
     FILE_LOCKED = 1,
     IS_DIRECTORY,
+    NOT_IMPLEMENTED,
 
     UNKNOWN = 1000
   };
-- 
2.20.1

